{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red194\green126\blue101;\red212\green212\blue212;\red167\green197\blue152;\red0\green0\blue0;\red255\green255\blue255;
\red212\green212\blue212;\red255\green255\blue255;\red213\green213\blue212;\red203\green203\blue202;\red202\green202\blue202;
}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c80784\c56863\c47059;\cssrgb\c86275\c86275\c86275;\cssrgb\c70980\c80784\c65882;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c99985;
\cssrgb\c86465\c86464\c86248;\cssrgb\c100000\c100000\c100000\c0;\cssrgb\c86653\c86652\c86220;\cssrgb\c83320\c83320\c83112;\cssrgb\c83229\c83229\c83125;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Task-1\
#include <iostream>\
using namespace std;\
\
struct Node \{\
    int data;\
    Node* left;\
    Node* right;\
    Node(int val) : data(val), left(nullptr), right(nullptr) \{\}\
\};\
\
Node* createBinaryTree() \{\
    Node* root = new Node(1);\
    root->left = new Node(2);\
    root->right = new Node(3);\
    root->left->left = new Node(4);\
    root->left->right = new Node(5);\
    return root;\
\}\
\
void inOrder(Node* root) \{\
    if (root == nullptr) return;\
    inOrder(root->left);\
    cout << root->data << " ";\
    inOrder(root->right);\
\}\
\
void preOrder(Node* root) \{\
    if (root == nullptr) return;\
    cout << root->data << " ";\
    preOrder(root->left);\
    preOrder(root->right);\
\}\
\
void postOrder(Node* root) \{\
    if (root == nullptr) return;\
    postOrder(root->left);\
    postOrder(root->right);\
    cout << root->data << " ";\
\}\
\
int main() \{\
    Node* root = createBinaryTree();\
    cout << "In-order Traversal: ";\
    inOrder(root);\
    cout << endl;\
    cout << "Pre-order Traversal: ";\
    preOrder(root);\
    cout << endl;\
    cout << "Post-order Traversal: ";\
    postOrder(root);\
    cout << endl;\
    return 0;\
\}\
\
\
Task.2\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 #include\cf4 \strokec4  \cf2 \strokec2 <\cf5 \strokec5 iostream\cf2 \strokec2 >\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 using\cf4 \strokec4  \cf2 \strokec2 namespace\cf4 \strokec4  std\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 struct\cf4 \strokec4  Node \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 int\cf4 \strokec4  data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  right\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 :\cf4 \strokec4  data\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 ),\cf4 \strokec4  left\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 ),\cf4 \strokec4  right\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \};\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  Node\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 val \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->left \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 void\cf4 \strokec4  inOrder\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  root->data \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  main\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     Node\cf6 \strokec6 *\cf4 \strokec4  root \cf6 \strokec6 =\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  values\cf6 \strokec6 []\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf6 \strokec6 \{\cf7 \strokec7 10\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 5\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 15\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 3\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 7\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 12\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 18\cf6 \strokec6 \};\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val \cf6 \strokec6 :\cf4 \strokec4  values\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         root \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "In-order Traversal of BST: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\
\
\
\cf8 \cb9 \strokec10 Task.3\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf2 \strokec2 <\cf5 \strokec5 iostream\cf2 \strokec2 >\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 using\cf4 \strokec4  \cf2 \strokec2 namespace\cf4 \strokec4  std\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 struct\cf4 \strokec4  Node \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 int\cf4 \strokec4  data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  right\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 :\cf4 \strokec4  data\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 ),\cf4 \strokec4  left\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 ),\cf4 \strokec4  right\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \};\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  Node\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 val \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->left \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  search\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  key\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf4 \strokec4  \cf6 \strokec6 ||\cf4 \strokec4  root->data \cf6 \strokec6 ==\cf4 \strokec4  key\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 key \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  search\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  search\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 void\cf4 \strokec4  inOrder\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  root->data \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  main\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     Node\cf6 \strokec6 *\cf4 \strokec4  root \cf6 \strokec6 =\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  values\cf6 \strokec6 []\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf6 \strokec6 \{\cf7 \strokec7 10\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 5\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 15\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 3\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 7\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 12\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 18\cf6 \strokec6 \};\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val \cf6 \strokec6 :\cf4 \strokec4  values\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         root \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "In-order Traversal of BST: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  key\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Enter value to search: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     cin \cf6 \strokec6 >>\cf4 \strokec4  key\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  result \cf6 \strokec6 =\cf4 \strokec4  search\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 result\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         cout \cf6 \strokec6 <<\cf4 \strokec4  key \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " found in the BST."\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \cb1 \strokec4 \
\cb3         cout \cf6 \strokec6 <<\cf4 \strokec4  key \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " not found in the BST."\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\
\
\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb11 \strokec12 Task.4\strokec13 \
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf2 \strokec2 <\cf5 \strokec5 iostream\cf2 \strokec2 >\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 using\cf4 \strokec4  \cf2 \strokec2 namespace\cf4 \strokec4  std\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 struct\cf4 \strokec4  Node \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 int\cf4 \strokec4  data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  right\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 :\cf4 \strokec4  data\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 ),\cf4 \strokec4  left\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 ),\cf4 \strokec4  right\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \};\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  Node\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 val \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->left \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  findMin\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Tree is empty"\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \cf6 \strokec6 -\cf7 \strokec7 1\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root->left \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  root->data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  findMin\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  findMax\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Tree is empty"\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  \cf6 \strokec6 -\cf7 \strokec7 1\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root->right \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 return\cf4 \strokec4  root->data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  findMax\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 void\cf4 \strokec4  inOrder\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  root->data \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  main\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     Node\cf6 \strokec6 *\cf4 \strokec4  root \cf6 \strokec6 =\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  values\cf6 \strokec6 []\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf6 \strokec6 \{\cf7 \strokec7 10\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 5\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 15\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 3\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 7\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 12\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 18\cf6 \strokec6 \};\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val \cf6 \strokec6 :\cf4 \strokec4  values\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         root \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "In-order Traversal of BST: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Minimum value in BST: "\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  findMin\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Maximum value in BST: "\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  findMax\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\
\
\pard\pardeftab720\partightenfactor0
\cf8 \strokec14 TASK.5\
\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 #include\cf4 \strokec4  \cf2 \strokec2 <\cf5 \strokec5 iostream\cf2 \strokec2 >\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 using\cf4 \strokec4  \cf2 \strokec2 namespace\cf4 \strokec4  std\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 struct\cf4 \strokec4  Node \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 int\cf4 \strokec4  data  \cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 *\cf4 \strokec4  right\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     Node\cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 :\cf4 \strokec4  data\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 ),\cf4 \strokec4  left\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 ),\cf4 \strokec4  right\cf6 \strokec6 (\cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\}\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \};\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  val\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf4 \strokec4  \cf2 \strokec2 new\cf4 \strokec4  Node\cf6 \strokec6 (\cf4 \strokec4 val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 val \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->left \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  findMinNode\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 while\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 &&\cf4 \strokec4  root->left\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root \cf6 \strokec6 =\cf4 \strokec4  root->left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 Node\cf6 \strokec6 *\cf4 \strokec4  deleteNode\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 ,\cf4 \strokec4  \cf2 \strokec2 int\cf4 \strokec4  key\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 key \cf6 \strokec6 <\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->left \cf6 \strokec6 =\cf4 \strokec4  deleteNode\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 key \cf6 \strokec6 >\cf4 \strokec4  root->data\cf6 \strokec6 )\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  deleteNode\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 else\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root->left \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3             Node\cf6 \strokec6 *\cf4 \strokec4  temp \cf6 \strokec6 =\cf4 \strokec4  root->right\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 delete\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  temp\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3         \cf2 \strokec2 else\cf4 \strokec4  \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root->right \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3             Node\cf6 \strokec6 *\cf4 \strokec4  temp \cf6 \strokec6 =\cf4 \strokec4  root->left\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 delete\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3             \cf2 \strokec2 return\cf4 \strokec4  temp\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3         \cb1 \
\cb3         Node\cf6 \strokec6 *\cf4 \strokec4  temp \cf6 \strokec6 =\cf4 \strokec4  findMinNode\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3         root->data \cf6 \strokec6 =\cf4 \strokec4  temp->data\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3         root->right \cf6 \strokec6 =\cf4 \strokec4  deleteNode\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 ,\cf4 \strokec4  temp->data\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  root\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 void\cf4 \strokec4  inOrder\cf6 \strokec6 (\cf4 \strokec4 Node\cf6 \strokec6 *\cf4 \strokec4  root\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     \cf2 \strokec2 if\cf4 \strokec4  \cf6 \strokec6 (\cf4 \strokec4 root \cf6 \strokec6 ==\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 )\cf4 \strokec4  \cf2 \strokec2 return\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->left\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  root->data \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 " "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root->right\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 int\cf4 \strokec4  main\cf6 \strokec6 ()\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     Node\cf6 \strokec6 *\cf4 \strokec4  root \cf6 \strokec6 =\cf4 \strokec4  \cf2 \strokec2 nullptr\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  valuesS\cf6 \strokec6 []\cf4 \strokec4  \cf6 \strokec6 =\cf4 \strokec4  \cf6 \strokec6 \{\cf7 \strokec7 10\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 5\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 15\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 3\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 7\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 12\cf6 \strokec6 ,\cf4 \strokec4  \cf7 \strokec7 18\cf6 \strokec6 \};\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf4 \strokec4  \cf6 \strokec6 (\cf2 \strokec2 int\cf4 \strokec4  val \cf6 \strokec6 :\cf4 \strokec4  values\cf6 \strokec6 )\cf4 \strokec4  \cf6 \strokec6 \{\cf4 \cb1 \strokec4 \
\cb3         root \cf6 \strokec6 =\cf4 \strokec4  insert\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  val\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cf6 \strokec6 \}\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "In-order Traversal before deletion: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 int\cf4 \strokec4  key\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "Enter value to delete: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     cin \cf6 \strokec6 >>\cf4 \strokec4  key\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     root \cf6 \strokec6 =\cf4 \strokec4  deleteNode\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 ,\cf4 \strokec4  key\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     \cb1 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  \cf5 \strokec5 "In-order Traversal after deletion: "\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     inOrder\cf6 \strokec6 (\cf4 \strokec4 root\cf6 \strokec6 );\cf4 \cb1 \strokec4 \
\cb3     cout \cf6 \strokec6 <<\cf4 \strokec4  endl\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf7 \strokec7 0\cf6 \strokec6 ;\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 \}\cf4 \cb1 \strokec4 \
}